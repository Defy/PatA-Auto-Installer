#Requires AutoHotkey v2.0
DetectHiddenText(false)

^!z::
{
    windowsMap := Map(1, SelectLanguage,
        2, SelectKeyboard,
        3, SelectSetupOption)
    WinWait("Windows 11 Setup")
    ; WinActivate
    ; Sleep(1000)
    ; SelectLanguage()
    ; SelectKeyboard()
    ; SelectSetupOption()
    ; GetImageTypes()
    ; AcceptLicenseTerms()
    ; SelectDiskInstallation()
    ; InstallWindows()
    SoundBeep(, 1000)
    ExitApp
}

^!1::
{
    numberMap := Map(1, a, 2, b, 3, c, 4, d, 5, e, 6, f)
    val := 3
    for (index, num in numberMap) {
        if (index < val) {
            continue
        }
        test := numberMap.Get(index)()
    }
    a() {
        MsgBox "a"
    }
    b() {
        MsgBox "b"
    }
    c() {
        MsgBox "c"
    }
    d() {
        MsgBox "d"
    }
    e() {
        MsgBox "e"
    }
    f() {
        MsgBox "f"
    }
}

GetCurrentWindow() {
    windowsArray := [
        "Select language settings",
        "SelSelect keyboard settings",
        "Select setup option", "Select Image",
        "Applicable notices and license terms",
        "Select location to install Windows 11",
        "Ready to install"
    ]
    WinWait("Windows 11 Setup")
    WinActivate
    for (index, window in windowsArray) {
        if (WinExist(, windowsArray[index])) {
            return index
        }
    }
    MsgBox "Could not find the active window. Exiting the auto installer", "Error!", "Iconx"
    ExitApp
}

^!r::
{
    Reload
}

^!x::
{
    ExitApp
}

SelectLanguage() {
    if (WinWait(, "Select language settings", 10)) {
        SendInput("!n")
        return
    }
    DisplayErrorMessage()
}

SelectKeyboard() {
    if (WinWait(, "Select keyboard settings", 10)) {
        SendInput("!n")
        return
    }
    DisplayErrorMessage()
}

SelectSetupOption() {
    if (WinWait(, "Select setup option", 10)) {
        text := "I &agree everything"
        classNN := FindClassNN(WinGetControls("Windows 11 Setup", "Select setup option"), text)
        ControlSetChecked(true, classNN)
        SendInput("!n")
        return
    }
    DisplayErrorMessage()
}

GetImageTypes() {
    if (WinWait(, "Select Image", 10)) {
        text := "Windows 11 Education"
        classNN := FindClassNN(WinGetControls("Windows 11 Setup", "Select Image"), text)
        SelectImageTypes("Windows 11 Enterprise")
        SendInput("!n")
        return
    }
    DisplayErrorMessage()

    SelectImageTypes(imageType) {
        if (ControlGetText(classNN) == imageType) {
            return
        }
        SendInput "{Down}"
        Sleep(100)
        SelectImageTypes(imageType)
    }
}

AcceptLicenseTerms() {
    if (WinWait(, "Applicable notices and license terms", 10)) {
        SendInput("!a")
        return
    }
    DisplayErrorMessage()
}

SelectDiskInstallation() {
    if (WinWait(, "Select location to install Windows 11", 20)) {
        while (!IsDisk0Unallocated()) {
            selectedRow := ListViewGetContent("Focused Col1", "SysListView323", "Windows 11 Setup")
            if (InStr(selectedRow, "Disk 0 Partition")) {
                SendInput("!d")
                WaitForPartitionDeletion()
            }
            GoToOption(GetDiskSteps(selectedRow))
        }
        selectedRow := ListViewGetContent("Focused Col1", "SysListView323", "Windows 11 Setup")
        if (InStr(selectedRow, "Disk 0 Unallocated Space")) {
            SendInput("!n")
        }
        return
    }
    DisplayErrorMessage()

    GetDiskSteps(selectedRow) {
        optionsStepsArray := []
        list := ListViewGetContent("Col1", "SysListView323", "Windows 11 Setup")
        isBeforeSelectedRow := true
        loop parse list, "`n" {
            if (InStr(A_LoopField, "Disk")) {
                if (selectedRow == A_LoopField) {
                    optionsStepsArray.Push(0)
                    isBeforeSelectedRow := false
                    continue
                }
                if (optionsStepsArray.Length < 1) {
                    optionsStepsArray.Push(-1)
                    continue
                }
                UpdateDiskSteps(isBeforeSelectedRow)
            }
        }
        return optionsStepsArray

        UpdateDiskSteps(boolean) {
            insertIndex := 0
            for (index, option in optionsStepsArray) {
                if (option < 0 && boolean) {
                    optionsStepsArray[index] -= 1
                    continue
                }
                if (optionsStepsArray[index] == 1) {
                    insertIndex := index
                }
                if (option > 0) {
                    optionsStepsArray[index] += 1
                }
            }
            boolean ? optionsStepsArray.Push(-1) : optionsStepsArray.InsertAt(insertIndex, 1)
        }
    }

    GoToOption(optionsStepsArray) {
        navigation := { navigate: "", steps: 0 }
        for (, option in optionsStepsArray) {
            if (option == 0) {
                continue
            }
            (option < 0) ? navigation.navigate := "{Up}" : navigation.navigate := "{Down}"
            navigation.steps := Abs(option)
            break
        }
        Loop navigation.steps {
            SendInput(navigation.navigate)
            Sleep(100)
        }
    }

    IsSelectedRowPartition() {
        selectedRow := ListViewGetContent("Focused Col1", "SysListView323", "Windows 11 Setup")
        if (InStr(selectedRow, "Disk 0 Partition")) {
            return true
        }
        return false
    }

    IsDisk0Unallocated() {
        list := ListViewGetContent("Col1", "SysListView323", "Windows 11 Setup")
        if (!RegexMatch(list, "m)^Disk 0 Partition")
            && RegexMatch(list, "Disk 0 Unallocated Space")) {
            return true
        }
        return false
    }

    WaitForPartitionDeletion() {
        refresh := { X1: 45, Y1: 115, X2: 55, Y2: 125 }
        Sleep(1000)
        while (!PixelSearch(&pixelX, &pixelY, refresh.X1, refresh.Y1, refresh.X2, refresh.Y2, 0x3AA5E4, 3)) {
            Sleep(500)
        }
    }
}

InstallWindows() {
    if (WinWait(, "Ready to install", 20)) {
        SendInput("!i")
        return
    }
    DisplayErrorMessage()
}

DisplayErrorMessage() {
    MsgBox "Failed to proceed to the next screen... Exiting the auto installer", "Error!", "Iconx"
    ExitApp
}

FindClassNN(classNNs, text) {
    ; Need to reverse classNNs array
    For (class in classNNs) {
        string := ControlGetText(class, "Windows 11 Setup")
        if (string == "") {
            continue
        }
        if (InStr(string, text)) {
            return class
        }
    }
}